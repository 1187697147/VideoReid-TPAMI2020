from __future__ import print_function, absolute_import
import os.path as osp
from reid.datasets import Market1501
from reid.datasets import CUHK03
from reid.datasets import DukeMTMC

from reid.data import transforms as T
from torch.utils.data import DataLoader
from reid.data import Preprocessor
from reid.datasets import create

from reid.data.sampler import RandomPairSampler
from reid.data.sampler import RandomIdentitySampler
from reid.data.sampler import RandomGallerySampler
from reid.data.sampler import RandomMultipleGallerySampler
from reid import data_manager

from reid.utils.dataset_loader import VideoDataset
    



def get_data(name, split_id, data_dir, height, width, batch_size, workers, combine_trainval, loss_mode='binary_loss', instances_num=4):

    root = osp.join(data_dir, name)
    dataset = create(name, root, split_id=split_id)
    #dataset = data_manager.init_vidreid_train_dataset(root=root, num_frame=1, name=name)
    dataset_test = data_manager.init_vidreid_test_dataset(root=root, num_frame=1, split_id=split_id,name=name)   
    #dataset = create(name, root, split_id=split_id)
    normalizer = T.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225])

    train_set =  dataset.train
    num_classes =dataset.num_train_pids


    train_transformer = T.Compose([T.RandomSizedRectCrop(height, width), T.RandomSizedEarser(),
        T.RandomHorizontalFlip(),
        T.ToTensor(),
        normalizer])

    test_transformer = T.Compose([
        T.RectScale(height, width),
        T.ToTensor(),
        normalizer,
    ])


    if loss_mode == 'oim':
        train_loader = DataLoader(
            Preprocessor(train_set, root=dataset.images_dir,
                         transform=train_transformer),
            batch_size=batch_size, num_workers=workers,
            shuffle=True, pin_memory=True, drop_last=True)

    elif loss_mode == 'binary':

        train_loader = DataLoader(Preprocessor(train_set, root=dataset.images_dir,
                         transform=train_transformer),
            batch_size=batch_size, num_workers=workers,
            sampler=RandomPairSampler(train_set), pin_memory=True)

    elif loss_mode == 'triplet':

        train_loader = DataLoader(
            Preprocessor(train_set, root=dataset.images_dir,
                         transform=train_transformer),
            batch_size=batch_size, num_workers=workers,
            sampler=RandomIdentitySampler(train_set),
            pin_memory=True, drop_last=True)
    elif loss_mode == 'crfloss':
        
        train_loader = DataLoader(
        Preprocessor(train_set,
                     transform=train_transformer),
        batch_size=batch_size, num_workers=workers,
        sampler=RandomMultipleGallerySampler(train_set, instances_num),
        pin_memory=True, drop_last=False)
        '''train_loader = DataLoader(
            Preprocessor(train_set, root=dataset.images_dir,
                         transform=train_transformer),
            batch_size=batch_size, num_workers=workers,
            sampler=RandomMultipleGallerySampler(train_set, instances_num),
            pin_memory=True, drop_last=True)'''
    else:
        raise ValueError('NO such loss function')
   
    query_loader = DataLoader(
        VideoDataset(dataset_test.query, seq_len=16, sample='all', transform=test_transformer),
        batch_size=1, shuffle=False, num_workers=workers,
        pin_memory=True, drop_last=False,
    )

    gallery_loader = DataLoader(
        VideoDataset(dataset_test.gallery, seq_len=16, sample='all', transform=test_transformer),
        batch_size=1, shuffle=False, num_workers=workers,
        pin_memory=True, drop_last=False,
    )

    return dataset, dataset_test, num_classes, train_loader,  query_loader, gallery_loader
